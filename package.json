{
  "name": "sort-your-imports",
  "displayName": "sort-your-imports",
  "description": "",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.65.0"
  },
  "categories": [
    "Formatters"
  ],
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onCommand:sort-your-imports.sortMyImportsOnKey",
    "onCommand:sort-your-imports.sortMyImportsOnSelected"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "sort-your-imports.sortMyImportsOnKey",
        "title": "Sort My Imports: All imports on key press"
      },
      {
        "command": "sort-your-imports.sortMyImportsOnSelected",
        "title": "Sort My Imports: Sort selected imports"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Sort My Imports",
      "properties": {
        "sortMyImports.removeDuplicates": {
          "type": "boolean",
          "default": true,
          "description": "Remove duplicate imports when sorting your imports."
        },
        "sortMyImports.removeEmptyLines": {
          "type": "boolean",
          "default": false,
          "description": "Remove empty lines when sorting your imports."
        },
        "sortMyImports.sortOnSave": {
          "type": "boolean",
          "default": false,
          "description": "Automatically sort your imports when saving a file."
        },
        "sortMyImports.omitSemicolon": {
          "type": "boolean",
          "default": false,
          "description": "If set to true, the trailing semicolon will be omitted."
        },
        "sortMyImports.quoteStyle": {
          "type": "string",
          "default": "single",
          "description": "The type of quotation mark to use. single(default) or double.",
          "enum": [
            "double",
            "single"
          ]
        },
        "sortMyImports.getMaxNamedImportsPerSingleLine": {
          "type": "number",
          "default": 50,
          "description": "The number of named imports to allow on a single line. If a single import has more than this number, they will be broken up onto separate lines."
        },
        "sortMyImports.sortBy": {
          "type": "string",
          "default": "lineLength",
          "description": "Different sorting methods for your import sorting needs. Sorting by line length is the default.",
          "enum": [
            "lineLength",
            "lineLengthReverse",
            "variableLength",
            "variableLengthReverse",
            "path",
            "importName",
            "natural",
            "shuffle"
          ],
          "enumDescriptions": [
            "Sort by the length of each line. Longest to shortest",
            "Sort by the length of each line. Shortest to longest",
            "Sort by the length of each the variable names. Longest to shortest",
            "Sort by the length of each the variable names. Shortest to longest",
            "Sort by the type of import path",
            "Sort by the type and name of the import. Namespace imports are first, followed by default imports, named imports, and unnamed imports.",
            "Sort alphabetically but groups multi-digit numbers together",
            "Sort lines shuffled (only in on select sort)"
          ]
        },
        "sortMyImports.pathSortOrdering": {
          "type": "string",
          "default": "['relativeDownLevel', 'relativeUpLevel', 'package']",
          "description": "An array describing the order in which imports should be sorted by paths. Only applicable if sort by is set to path. 1: package - Any import path that does not begin with '.' 2: relativeUpLevel - Any import path that begins with '../' 3: relativeDownLevel - Any import path that begins with './'",
          "enum": [
            "['relativeDownLevel', 'relativeUpLevel', 'package']",
            "['relativeDownLevel', 'package', 'relativeUpLevel']",
            "['relativeUpLevel', 'relativeDownLevel', 'package']",
            "['relativeUpLevel', 'package', 'relativeDownLevel']",
            "['package', 'relativeUpLevel', 'relativeDownLevel']",
            "['package', 'relativeDownLevel', 'relativeUpLevel']"
          ]
        }
      }
    },
    "menus": {
      "editor/context": [
        {
          "when": "resourceLangId == typescript || resourceLangId == javascript || resourceLangId == javascriptreact || resourceLangId == typescriptreact",
          "command": "sort-your-imports.sortMyImportsOnSelected",
          "group": "1_modification"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceLangId == typescript || resourceLangId == javascript || resourceLangId == javascriptreact || resourceLangId == typescriptreact",
          "command": "sort-your-imports.sortMyImportsOnSelected",
          "group": "1_modification"
        }
      ]
    },
    "keybindings": [
      {
        "when": "resourceLangId == typescript || resourceLangId == javascript || resourceLangId == javascriptreact || resourceLangId == typescriptreact",
        "command": "sort-your-imports.sortMyImportsOnKey",
        "key": "f10"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.65.0",
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.0",
    "@types/node": "14.x",
    "@typescript-eslint/eslint-plugin": "^5.12.1",
    "@typescript-eslint/parser": "^5.12.1",
    "eslint": "^8.9.0",
    "glob": "^7.2.0",
    "mocha": "^9.2.1",
    "typescript": "^4.5.5",
    "@vscode/test-electron": "^2.1.2"
  }
}
